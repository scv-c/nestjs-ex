따라하며 배우는 NestJS

# nestjs 설치
- npm i -g install @nestjs/cli
-nest new {APP_NAME}


# 순서
-main.ts에서 앱을 생성함.
-앱모듈은 app.modules.ts

# BoardModule 생성
>nest g module {module_name}


# 데코레이터
@Controller('/boards')
export class BoardsController {...}

#Handler
-핸들러는  @Get @Post @Delete 등과 같은 데코레이터로 장식 된 컨트롤 클래스 내의 단순한 메서드
@Controller('/boards')
export class BoardsContoller {
 @Get()
 getBoards() : string {
	...
 } 
}



# BoardContoller 생성
> nest g controller boards --no-spect 

--no-spec : 테스트소스코드 생성 x


#Provide
-프로바디어는 Nest 기본개념
-대부분 Nest클래스는 서비스,리포지토리, 팩토리, 헬퍼등 프로바이더로 취급될수있음.
-종속성으로 주입하자~! DI
-Controller에는 많은 서비스가 필요할수있음. 
- SPRING이랑 비스읏하네~
@Module({
  controllers: [BoardsController]
})

#Service
-@injectable 데코레이터로 감싸져서 모듈에 제공되며, 이 서비스 인스턴스는 앱전체에서 사용가능함.
-서비스는 컨트롤러에서 데이터의 유효성 체크를 하거나, 데이터베이스에 아이템을 생성하는 등의 작업을 함.
@injectable()
export class AppService {
	...
}

#Service를 Controller

# BoardService 생성
> nest g service boards --no-spect 


#private
private로 설정하지 않으면, 다른곳에서 접근할수가있음..

#board.model.ts
- 게시물에는 이름, 공개글여부, 이름 등... 이것을 Model
- Board를 배열로.
export class BoardsService {
  private boards:Board[] = [];

  getAllBoards():Board[] {
    return this.boards;
  }
}

#uuid는 모듈
>npm install uuid --save

# @Body

#DTO
-데이터 교환을 위한 객체
-NestJS에서는 Class를 정의해서 사용하는것을 추천
-> 클래스는 인터페이스와 다르게 런타임에서 작동하기 때문에, 파이프 같은 기능을 이용할때 유용

-DTO는 안쪽에 형식은
create-board.dto.ts

-변경하게되면, controller에서 @Body부분을 @Body createBoardDto:CreateBoardDto 로 변경
->서비스도 변경해줘야함. 그후, title,description을 createBoardDto에서 가져오는것으로 변경.
-> 이건마치... spring에서 객체에 자동으로 해당값을 집어넣어서 해당 비즈니스로직에서 사용하는것..


#PIPE
- @Injectable() 데코레이터로 주석이 달린 클래스

-Data Tarnsformation
-Data validation

-BindingPipes 3가지 Handler-level, Parameter-level, global-level

#Hnadler-level
@UsePipes(pipe) 데코레이터

#Parameter-level Pipes
@Body('title', ParameterPipe) ...

#GlobalPipes
app.useGlobalPipes(GlobalPipes);

-이미 만들어져있는 Pipe [ ParseIntPipe, ... ]


#유효성체크
>npm install class-validator class-transformer --save

export class CreateBoardDto {
  @IsNotEmpty()
  title: string;

  @IsNotEmpty()
  description: string;
}

--
  @Post()
  @UsePipes(ValidationPipe)
  createBoard(@Body() createBoardDto: CreateBoardDto): Board {
    return this.boardsService.createBoard(createBoardDto);
  }


#커스텀 파이프

export class BoardStatusValidationPipe implements PipeTransform { }


#Postgresql 설치

#TypeORM
-nodejs에서 실행되고 typeScript로 작성된 객체 관계형 매퍼 라이브러리
-ORM(Object Relational Mapping) : 객체와 관계형 DB의데이터를 자동으로 변형 및 연결하는 작업.

특징
-모델을 기반으로 데이터베이스 테이블 체계를 자동으로 생성합니다.
-데이터베이스에서 개체를 쉽게 삽입,업데이트 및 삭제할수있습니다.
-간단한 CLI명령을 제공합니다.
-테이블간의 매핑(1:1,1:N,N:N)을 만듭니다.
-다른모듈과 쉽게 통일합니다.
-ORM프레임워크를 사용하기 쉽습니다.


#3가지 설치
@nestjs/typeorm
typeorm 모듈
pg 모듈
npm install pg typeorm @nestjs/typeorm --save



#typeORM 설정파일 생성
src>configs>typeorm.config.ts

셋팅후, app.module.ts에 모듈 import
imports: [BoardsModule, TypeOrmModule.forRoot(typeORMConfig)],

#Entity
왜 entity를?
TypeORM을 사용할때는 DBㅌ체이블로 변환되는 Class이기때문에 Table을 만들지않고, 그안에 컬럼을 만듬.

@Entity()
-클래스가 엔티티임을 나타내는 데코레이터

유니크값(PK) 
@PrimaryGeneratedColumn()
-특정 컬럼 열이 엔티티의 기본키 열임을 나타앰

@Column()
-엔티티의 title및 description같은 열을 나타내는데 사용됨



#Repository
-엔티티개체와 함께 작동하며, 엔티티찾기,삽입,생성 등을 처리함.
typeorm공식문서 확인하면 좋음

-DB와 관련된 일은 Repository에서 함.
이것을 Repository Pattern이라고 함

-파일생성
board.repository.ts
//여기서 Board는 entity
@EntityRepository(Board)
export class BoardRepository extends Repository<Board>(){}


그후 board.module.ts 에 import
imports: [TypeOrmModule.forFeature([BoardRepository])],



#CRUD 하기전, 코드정리

1.Service와 Controller 모두 주석
2.Board.model 더이상 필요없음. (Entity 사용)
3.board-status.enum.ts 로 이름 변경
4. controller, service쪽 import구문 바뀐거 확인


#DB에서 데이터 가져오기위해 Service에 종속성주입하기.
-Service 의 constructor에 boardRepository 종속성주입 
그리고 @InjectRepository() 데코레이터를 사용하여,이 서비스에서 BoardRepository를 이용한다고 알림.

constructor(
    @InjectRepository(BoardRepository)
    private boardRepository: BoardRepository,
  ) {}



#typeORM에서 제공하는 findOne사용할것.
-await async를 사용해야함.

-service에서 findOneBy({id})로 해야함.
-그후 controller getBoardById() 수정



##큰일났다. EntityRepository 데코레이터가 사라져서, 커스텀을만들어야한다는데, 뭔소린지모르겠다
url : https://prod.velog.io/@pk3669/typeorm-0.3.x-EntityRepository-%EB%8F%8C%EB%A0%A4%EC%A4%98
아......

https://velog.io/@sheoae12/NestJS-Custom-Repository-%EB%A7%8C%EB%93%A4%EA%B8%B0
형님사랑합니다




# 해결후 getAllBoards도 만들고, delete도 만들고, updateBoardStatus도 만듬.

# auth module도 만듬.
nest g moudle auth
nest g controller auth --no-spec
nest g service auth --no-spec

#UserRepository생성, UserEntity생성 후 imports 추가
-- EntityRepository가 없으니, Board에서와 같이 처리.

#dto 생성
auth-credencial.dto.ts
export class AuthCredntaisDto {
  username: string;
  password: string;
}

#class-validator 데이터 유효성체크 추가
@IsString()
@MinLength(N);
@MaxLength(N);
@Matches(/^정규식$/)


#이렇게 설정한건, ValidationPipe로 넣어주어야함.
//auth.controller.ts
@Post('/signup')
  signUp(
    @Body(ValidationPipe) authCredntaisDto: AuthCredntaisDto,
  ): Promise<void> {
    return this.authService.createUser(authCredntaisDto);
  }


#UserName을 고유하게 설정하는 방법
DB레벨에서 하는것 : Entity에서 @Unique() 사용
-> @Unique(['username'])

이렇게하면, 동일 ID 등록시 아래와 같은 결과 확인
{
    "statusCode": 500,
    "message": "Internal server error"
}

--> message를 내입맛대로 하기 위해선, Controller 레벨에서 try-catch사용
async createUser(authCredntaisDto: AuthCredntaisDto): Promise<void> {
    const { username, password } = authCredntaisDto;
    const user = this.create({ username, password });

    try {
      await this.save(user);
    } catch (error) {
      if (error.code === '23505') {
        throw new ConflictException('Existing username');
      } else {
        throw new InternalServerErrorException();
      }
    }
  }


추신 : ConflictException은 409코드 에러를 의미하는데, "현재상태와 충돌했다"는 의미.
보통 PUT 요청시에 발생.


#비번 암호화 - bcrypt.js 사용
npm install bcryptjs --save

암호화방식
1. 그냥
2. 암호화키+알고리즘
  -> 암호화키 털리면, 알고리즘은 거의다 오픈되어있어서 걍뚫림
3. 해쉬방식
  -> 레인보우테이블을 만들어놔서, 비교함
4. 솔느(salt)+비밀번호(Plain paswrod)를 해시로 암호화해서 저장

만드는방법은 요롷게

    const salt = await bcrypt.genSalt();
    const hashedPassword = await bcrypt.hash(password, salt);

    const user = this.create({ username, password: hashedPassword });

로그인시 비교하는건 이렇게 

if (user && (await bcrypt.compare(password, user.password))) {}

#JWT
JWT는 Header(메타데이터)+Payload(정보,만료기간,...)+VerifySignature(서명,공개키...) 구성.
제일중요한건.. 이건 어떻게 관리하려나..

(1) Client가 JWT토큰을 Header에 담아서 보냄
(2) 서버에서 받아서, Header+Payload 와 서버내에 secretText를 조합하여 VerifySignature 만듬.
(3) Client가 보낸 VerifySignature와 서버에서 만든 VerifySignature 비교.

JWT 설치, passport모듈 설치
@nestjs/jwt
@nestjs/passport
passport-jwt
passport

>npm install @nestjs/jwt @nestjs/passport passport passport-jwt --save

auth.module에 imports
 imports: [
    JwtModule.register({ secret: '', signOptions: { expiresIn: 60 * 60 } }),
    TypeOrmModule.forFeature([User]),
  ],

secret : secret Text부분
expiresin : 유효기간 60*60은 1시간


passport도 등록.
PassportModule.register({ defaultStrategy: 'jwt' }),
defaultStrategy : 기본전략을 jwt로..


# @types/passport-jwt 생성
npm install @types/passport-jwt --save

#jwt.strategy.ts 생성

@Injectable() // 다른곳에서도 사용할수있게
extends PassportStrategy(Strategy) {} JWT Strategy를 사용하기위해, extends

constructor(..) {
	super( { secretOrKey : "~~~", // auth.module에 추가했을때 쓴 secretText 값과 동일. 목적이다르기에 속성이다름
		jwtFromRequest:ExtractJwt.fromAuthHeaderAsBearerToken() // token값을 Header에서 bearerToken Type에서 가져오겠다.
} )
}

#auth.module의 provides와 exports에 jwtStrategy와 PassportModule 추가해줘야함.
exports에 추가하는 이유는, 다른곳에서도 이것을 사용하기 위해서.


#이제 Request객체 내에 jwtStrategy에서 반환하는 user객체를 넣고싶은데... 어떻게하냐?
UseGuards 안에 @nestjs/passport에서 가져온 AutGuard()를 넣어주자.

-- 
NestJS에는 여러가지 미들웨어가 있다. Pipes, Filters, Guards, Interceptors 
	Pipes : 유효성검사, Filter : , Guards : 인증미들웨어, Interceptor : 로깅

미들웨어 불러지는 순서@@
middleware -> guard -=> interceptor -> pipe -> controller -> service -> controller -> interceptor -> filter -> client

--

@UseGuards(AuthGuard()) 추가하면 , Request에 이게 추가됨

authInfo: undefined,
  user: User {
    id: 7,
    username: '라ㅋ따뚜이',
    password: '$2a$10$ImuFqNPJIxJE5W7pLZyNIutTbUw.RXhEUJdA3ZuGSdioSVf4JlxNS'
  },
  [Symbol(kCapture)]: false,




